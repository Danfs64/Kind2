// U32
// ===

// (If U32 a a) : a
(If 0 t f) = f
(If 1 t f) = t

// Pair
// ====

// (PairGet (Pair a b) (∀a ∀b c)) : c
(PairGet (Pair x y) fn) = (fn x y)

// Maybe
// =====

// (Default (Maybe a) a) : a
(Default None     y) = y
(Default (Some x) y) = x

(ToMaybe 0 x) = None
(ToMaybe 1 x) = (Some x)

// List
// ====

// (Find (∀a (Maybe b)) (List a)) : (Maybe b)
(Find cond Nil)             = None
(Find cond (Cons x xs))     = (FindGo (cond x) cond xs)
  (FindGo None     cond xs) = (Find cond xs)
  (FindGo (Some x) cond xs) = (Some x)

// String
// ======

// (StrIsEmpty String) : Bool
(StrIsEmpty StrNil)         = 1
(StrIsEmpty (StrCons x xs)) = 0

// (StrConcat a:String b:String) : String
(StrConcat StrNil         ys) = ys
(StrConcat (StrCons x xs) ys) = (StrCons x (StrConcat xs ys))

// (StrFlatten a:(List String)) : String
(StrFlatten Nil)         = StrNil
(StrFlatten (Cons x xs)) = (StrConcat x (StrFlatten xs))

// (StrEqual (List String) (List String)) : U32
(StrEqual StrNil         StrNil)         = 1
(StrEqual (StrCons x xs) (StrCons y ys)) = (& (== x y) (StrEqual xs ys))
(StrEqual xs             ys)             = 0

// Todo: improve this
// (StrHash String) : String
(StrHash str) = (StrHashGo str 0)
  (StrHashGo StrNil         hash) = hash
  (StrHashGo (StrCons x xs) hash) = (StrHashGo xs (+ (- (<< hash 5) hash) x))

// Parser
// ======

// Code : Type
// Code = String

// Answer : Type -> Type
// Answer A = Parsed Code A | Failed String

// Parser : Type -> Type
// Parser A = Code -> Answer A

// (IsNameChar Char) : Bool
(IsNameChar chr) =
  let is_letter = (| (& (<= 'a' chr) (<= chr 'z')) (& (<= 'A' chr) (<= chr 'Z')))
  let is_number = (& (<= '0' chr) (<= chr '9'))
  let is_symbol = (& (== '_' chr) (== '.' chr))
  (| is_letter (| is_number is_symbol))

// (Bind a_parser:(Parser a) b_parser:(∀a (Parser B))) : (Parser B)
(Bind a_parser b_parser) = λcode (BindGo b_parser (a_parser code))
  (BindGo b_parser (Parsed code a_val)) = (b_parser a_val code)
  (BindGo b_parser (Failed err))        = (Failed err)

// (Done val:a) : (Parser a)
(Done value) = λcode (Parsed code value)

// (IsSpace Char) : Bool
(IsSpace chr) = (| (== 10 chr) (== ' ' chr))

// (GetName String) : (Pair code:String name:String)
(GetName)                             = λcode (GetNameGo code)
  (GetNameGo StrNil)                  = (Pair StrNil StrNil)
  (GetNameGo (StrCons head tail))     = (GetName_1 (IsNameChar head) head tail)
    (GetName_1 0 head tail)           = (Pair (StrCons head tail) StrNil)
    (GetName_1 1 head tail)           = (GetName_2 head (GetNameGo tail))
    (GetName_2 head (Pair code name)) = (Pair code (StrCons head name))

// (PeekHere text:String) : (Parser Bool)
(PeekHere text)                               = λcode (Peek_0 text code λx(x))
  (Peek_0 StrNil         ys             init) = (Parsed (init ys)  True)
  (Peek_0 (StrCons x xs) StrNil         init) = (Parsed (init Nil) False)
  (Peek_0 (StrCons x xs) (StrCons y ys) init) = (Peek_1 (== x y) xs y ys init)
  (Peek_1 0 xs y ys init)                     = (Parsed (init (StrCons y ys)) False)
  (Peek_1 1 xs y ys init)                     = (Peek_0 xs ys λk (init (StrCons y k)))

// TODO: simplify by calling Peek here
// (MatchHere text:String) : (Parser Bool)
(MatchHere text)                               = λcode (Match_0 text code λx(x))
  (Match_0 StrNil         ys             init) = (Parsed ys True)
  (Match_0 (StrCons x xs) StrNil         init) = (Parsed (init Nil) False)
  (Match_0 (StrCons x xs) (StrCons y ys) init) = (Match_1 (== x y) xs y ys init)
  (Match_1 0 xs y ys init)                     = (Parsed (init (StrCons y ys)) False)
  (Match_1 1 xs y ys init)                     = (Match_0 xs ys λk (init (StrCons y k)))

// (Match text:String) : (Parser Bool)
(Match text) = λcode ((MatchHere text) (SkipSpaces code))

// (ParseTextHere text:String) : (Parser Unit)
(ParseTextHere text)      = (Bind (MatchHere text) λgot(ParseTextHere_0 got))
  (ParseTextHere_0 False) = (Failed "Expected...")
  (ParseTextHere_0 True)  = (Done Unit)

// (ParseText text:String) : (Parser Unit)
(ParseText text) = λcode ((ParseTextHere text) (SkipSpaces code))

// (SkipSpaces String) : String
(SkipSpaces (StrCons x xs)) = (SkipSpaces_0 (IsSpace x) x xs)
  (SkipSpaces_0 0 x xs)     = (StrCons x xs)
  (SkipSpaces_0 1 x xs)     = (SkipSpaces xs)

// (ParseNameHere) : (Parser String)
ParseNameHere                        = λcode (ParseNameHere_0 ((GetName) code))
  (ParseNameHere_0 (Pair code name)) = (Parsed code name)

// (ParseName) : (Parser String)
ParseName = λcode ((ParseNameHere) (SkipSpaces code))

// (Grammar choices:(List (Parser (Maybe a)))) : (Parser a)
(Grammar Nil)                                     = λcode (Failed "Expected...")
(Grammar (Cons choice choices))                   = λcode (Grammar_0 (choice code) choices)
  (Grammar_0 (Failed err)                choices) = (Failed err)
  (Grammar_0 (Parsed code None)          choices) = ((Grammar choices) code)
  (Grammar_0 (Parsed code (Some result)) choices) = (Parsed code result)

// Note: unlike Rust's version, this won't rollback
// (Guard head:(Parser Bool) body:(Parser a)) : (Parser (Maybe a))
(Guard head body) = λcode (Guard_0 (head code) body)
  (Guard_0 (Failed err)          body) = (Failed err)
  (Guard_0 (Parsed code False)   body) = (Parsed code None)
  (Guard_0 (Parsed code True)    body) = ((Bind body λgot(Done (Some got))) code)

// Term
// ====

// Term Parsing
// ------------

// (ParseVar) : (Parser (Maybe Term))
(ParseVar) = (Bind ParseName λname (ParseVar_0 name))
  (ParseVar_0 StrNil        ) = (Done None)
  (ParseVar_0 (StrCons x xs)) = (Done (Some (Var (StrCons x xs))))

// (ParseTyp) : (Parse (Maybe Term))
(ParseTyp) = (Guard (Match "Type")
  (Done Typ))

// (ParseAnn) : (Parse (Maybe Term))
(ParseAnn) = (Guard (Match "{")
  (Bind ParseTerm       λxval
  (Bind (ParseText ":") λskip
  (Bind ParseTerm       λxtyp
  (Bind (ParseText "}") λskip
  (Done (Ann xval xtyp)))))))

// (ParseDef) : (Parser (Maybe Term))
(ParseDef) = (Guard (Match "def ")
  (Bind ParseName   λname
  (Bind (Match ":") λanns
  (ParseDefAnn anns name))))
(ParseDefAnn True name) =
  (Bind ParseTerm       λtype
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Subst name (Ann expr type) body))))))
(ParseDefAnn False name) =
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Subst name expr body)))))

// (ParseLet) : (Parser (Maybe Term))
(ParseLet) = (Guard (Match "let ")
  (Bind ParseName   λname
  (Bind (Match ":") λanns
  (ParseLetAnn anns name))))
(ParseLetAnn True name) =
  (Bind ParseTerm       λtype
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Let name (Ann expr type) body))))))
(ParseLetAnn False name) =
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Let name expr body)))))

// (ParseAll) : (Parse (Maybe Term))
(ParseAll) = (Guard (Match "∀")
  (Bind (ParseText "(")  λskip
  (Bind ParseName        λname
  (Bind (ParseText ":")  λskip
  (Bind ParseTerm        λtype
  (Bind (ParseText ")")  λskip
  (Bind ParseTerm        λbody
  (Done (All name type body)))))))))

// (ParseLam) : (Parser (Maybe Term))
(ParseLam) = (Guard (Match "λ")
  (Bind ParseName λname
  (Bind ParseTerm λbody
  (Done (Lam name body)))))

// (ParseApp) : (Parser (Maybe Term)) 
(ParseApp) = (Guard (Match "(")
  (Bind ParseTerm       λfunc
  (Bind ParseTerm       λargm
  (Bind (ParseText ")") λx
  (Done (App func argm))))))

// (ParseTerm) : (Parser Term)
(ParseTerm) = (Grammar [
  ParseDef,
  ParseLet,
  ParseAnn,
  ParseAll,
  ParseLam,
  ParseApp,
  ParseTyp,
  ParseVar,
])

// (Read code) : Term
(Read code) = (Read_0 ((ParseTerm) code))
  (Read_0 (Parsed code term)) = term

// Term Stringification
// --------------------

// (Show term:Term) : String
(Show term) = ((ShowGo term) "")
  (ShowGo (Var name)) =
    λx((ShowGoStr name)
      x)
  (ShowGo (Let name expr body)) =
    λx((ShowGoStr "let ")
      ((ShowGoStr name)
      ((ShowGoStr " = ")
      ((ShowGo expr)
      ((ShowGoStr "; ")
      ((ShowGo body)
      x))))))
  (ShowGo (Ann xval xtyp)) =
    λx((ShowGoStr "{")
      ((ShowGo xval)
      ((ShowGoStr " : ")
      ((ShowGo xtyp)
      ((ShowGoStr "}")
      x)))))
  (ShowGo Typ) =
    λx((ShowGoStr "Type")
      x)
  (ShowGo (All name type body)) =
    λx((ShowGoStr "∀(")
      ((ShowGoStr name)
      ((ShowGoStr ": ")
      ((ShowGo type)
      ((ShowGoStr ") ")
      ((ShowGo body)
      x))))))
  (ShowGo (Lam name body)) =
    λx((ShowGoStr "λ")
      ((ShowGoStr name)
      ((ShowGoStr " ")
      ((ShowGo body)
      x))))
  (ShowGo (App func argm)) =
    λx((ShowGoStr "(")
      ((ShowGo func)
      ((ShowGoStr " ")
      ((ShowGo argm)
      ((ShowGoStr ")")
      x)))))
  (ShowGoStr xs) =
    λx(StrConcat xs x)

// Substitution
// ------------

// Used for parse-time subst (def), NOT by the evaluator/checker!
// Assumes no freevars.

// (Subst String Term Term) : Term
(Subst nm val (Var name))           = (If (StrEqual name nm) val (Var name))
(Subst nm val Typ)                  = Typ
(Subst nm val (Ann xval xtyp))      = (Ann (Subst nm val xval) (Subst nm val xtyp))
(Subst nm val (Let name expr body)) = (Let name (Subst nm val expr) (SubstBody nm val name body))
(Subst nm val (All name type body)) = (All name (Subst nm val type) (SubstBody nm val name body))
(Subst nm val (Lam name body))      = (Lam name (SubstBody nm val name body))
(Subst nm val (App func argm))      = (App (Subst nm val func) (Subst nm val argm))

// (SubstBody String Term String Term) : Term
(SubstBody nm val name body) = (SubstBodyGo (StrEqual nm name) nm val body)
  (SubstBodyGo 0 nm val body) = (Subst nm val body)
  (SubstBodyGo 1 nm val body) = body

// Term Evaluation
// ---------------

// Counts free occurrences of a name
// TODO: replace CountShadow by If
// (Count String Term) : U32
(Count nm (Var name))           = (StrEqual name nm)
(Count nm Typ)                  = 0
(Count nm (Ann xval xtyp))      = (Count nm xval)
(Count nm (Let name expr body)) = (+ (Count nm expr) (CountShadow (StrEqual nm name) nm body))
(Count nm (All name type body)) = (+ (Count nm type) (CountShadow (StrEqual nm name) nm body))
(Count nm (Lam name body))      = (CountShadow (StrEqual nm name) nm body)
(Count nm (App func argm))      = (+ (Count nm func) (Count nm argm))
(CountShadow 0 nm body)         = (Count nm body)
(CountShadow 1 nm body)         = 0

// Appends N copies of a term to a vars context
(Clone 0 name term ctx) = ctx
(Clone 1 name term ctx) = (Cons (Pair name term) ctx)
(Clone n name term ctx) = (Cons (Pair name term) (Clone (- n 1) name term ctx))

// Converts a term to high-order
// (High term:Term) : HTerm
(High term) = (PairGet (HighGo term Nil) λx λy y)
  (HighGo (Var name) vars) = (HighFind name vars)
    (HighFind name Nil) = (Pair Nil (HVar name))
    (HighFind name (Cons (Pair var val) vars)) = (HighFound (StrEqual name var) name var val vars)
      (HighFound 1 name var val vars) =
        (Pair vars val)
      (HighFound 0 name var val vars) =
        (PairGet (HighFind name vars) λvars λgot
        (Pair (Cons (Pair var val) vars) got))
  (HighGo (Ann xval xtyp) vars) =
    (HighGo xval vars)
  (HighGo Typ vars) =
    (Pair vars HTyp)
  (HighGo (All name type body) vars) =
    (PairGet (HighGo type vars) λvars λtype
    (PairGet (HighGo body (Clone (Count name body) name $x vars)) λvars λbody
    (Pair vars (HAll type λ$x body))))
  (HighGo (Let name expr body) vars) =
    (PairGet (HighGo expr vars) λvars λexpr
    (PairGet (HighGo body (Clone (Count name body) name expr vars)) λvars λbody
    (Pair vars body)))
  (HighGo (Lam name body) vars) =
    (PairGet (HighGo body (Clone (Count name body) name $x vars)) λvars λbody
    (Pair vars (HLam λ$x body)))
  (HighGo (App func argm) vars) =
    (PairGet (HighGo func vars) λvars λfunc
    (PairGet (HighGo argm vars) λvars λargm
    (Pair vars (HApply func argm))))

// Application
(HApply (HLam fbody) argm) = (fbody argm)
(HApply func         argm) = (HApp func argm)

// Converts a term to low-order
(Low term) = (LowGo term 0)
  (LowGo (HVar name) depth) =
    (Var name)
  (LowGo HTyp depth) =
    Typ
  (LowGo (HAll type body) depth) =
    let name = (StrCons (+ 97 depth) StrNil)
    let type = (LowGo type depth)
    let body = (LowGo (body (HVar name)) (+ depth 1))
    (All name type body)
  (LowGo (HLam body) depth) =
    let name = (StrCons (+ 97 depth) StrNil)
    let type = Typ
    let body = (LowGo (body (HVar name)) (+ depth 1))
    (Lam name body)
  (LowGo (HApp func argm) depth) =
    let func = (LowGo func depth)
    let argm = (LowGo argm depth)
    (App func argm)

(Normal term) = (Low (High term))

// Term Type-Checker
// -----------------

// Result : Type -> Type
// Result A = Ok A | Err String

// (Bind a_parser:(Parser a) b_parser:(∀a (Parser B))) : (Parser B)
(Chain (Err str) b_result) = (Err str)
(Chain (Ok val)  b_result) = (b_result val)

// (Equal HTerm HTerm) : Bool
(Equal (HVal a_numb)        (HVal b_numb)        depth) = (== a_numb b_numb)
(Equal (HVar a_name)        (HVar b_name)        depth) = (StrEqual a_name b_name)
(Equal HTyp                 HTyp                 depth) = 1
(Equal (HAll a_type a_body) (HAll b_type b_body) depth) = (& (Equal a_type b_type depth) (Equal (a_body (HVal depth)) (b_body (HVal depth)) (+ depth 1)))
(Equal (HLam a_body)        (HLam b_body)        depth) = (Equal (a_body (HVal depth)) (b_body (HVal depth)) (+ depth 1))
(Equal (HApp a_func a_argm) (HApp b_func b_argm) depth) = (& (Equal a_func b_func depth) (Equal a_argm b_argm depth))
(Equal a                    b                    depth) = 0

// (InferGo Term Ctx) : (Result Term)
(Infer term) = (InferGo term Nil)
  (InferGo (Var name) ctx) = (InferGoFind name ctx)
    (InferGoFind name Nil) =
      (Err (StrConcat "Unbound: " name))
    (InferGoFind name (Cons (Pair var typ) ctx)) =
      (If (StrEqual name var) (Ok typ) (InferGoFind name ctx))
  (InferGo Typ ctx) =
    (Ok HTyp)
  (InferGo (Ann xval xtyp) ctx) =
    let htyp = (High xtyp)
    (Chain (CheckGo xtyp HTyp ctx) λok
    (Chain (CheckGo xval htyp ctx) λok
    (Ok htyp)))
  (InferGo (All name type body) ctx) =
    (Chain (CheckGo type HTyp ctx) λok
    (Chain (CheckGo body HTyp (Cons (Pair name (High type)) ctx)) λok
    (Ok HTyp)))
  (InferGo (Let name expr body) ctx) =
    (Chain (InferGo expr ctx) λexpr_t
    (InferGo body (Cons (Pair name expr_t) ctx)))
  (InferGo (Lam name body) ctx) =
    (Err "Can't infer lambda.")
  (InferGo (App func argm) ctx) =
    (Chain (InferGo func ctx) λft (InferGoApp ft argm ctx))
      (InferGoApp (HAll ftype fbody) argm ctx) =
        (Chain (CheckGo argm ftype ctx) λok
        (Ok (fbody (High argm))))
      (InferGoApp other argm ctx) =
        (Err "Non-function application.")
      
  // (CheckGo Term Term Ctx) : (Result Unit)
  (CheckGo (Lam name body) (HAll t_type t_body) ctx) = 
    (Chain (CheckGo body (t_body (HVar name)) (Cons (Pair name t_type) ctx)) λres
    (Ok res))
  (CheckGo term type ctx) =
    (Chain (InferGo term ctx) λterm_t
    (CheckGoEqual (Equal term_t type 0) type term_t))

// (CheckGoEqual U32 HTerm HTerm) : (Result Unit)
(CheckGoEqual 1 expect detect) = (Ok Unit)
(CheckGoEqual 0 expect detect) = (Err (StrFlatten [
  "Type mismatch.",
  " Expected: `", (Show (Low expect)), "`.",
  " Detected: `", (Show (Low detect)), "`.",
]))

(Test code) = let term = (Read code); (TestPrint (Infer term) term)
  (TestPrint (Err err) term) = err
  (TestPrint (Ok type) term) = (StrFlatten ["main : ", (Show (Low type)), " = ", (Show (Normal term))])

// Checks some function calls
Test0 = (Test "
  let main
    : ∀(a  : Type)
      ∀(b  : Type)
      ∀(aa : ∀(x: a) a)
      ∀(ab : ∀(x: a) b)
      ∀(ba : ∀(x: b) a)
      ∀(bb : ∀(x: b) b)
      ∀(x  : a)
      ∀(y  : b)
      a
    = λa λb λaa λab λba λbb λx λy
      (aa (ba (bb (bb (ab (aa (ba (ab (aa x)))))))))
  main
")

// Checks Church-Nats
Test1 = (Test "
  def Nat : Type =
    ∀(p: Type) ∀(s: ∀(n: p) p) ∀(z: p) p

  let zero : Nat =
    λp λs λz z

  let succ : ∀(n: Nat) Nat =
    λn λp λs λz (s (((n p) s) z))

  (succ (succ (succ zero)))
")

// Checks type-level computations
Test2 = (Test "
  def Bool : Type =
    ∀(p: Type) ∀(t: p) ∀(f: p) p

  def true : Bool =
    λp λt λf t

  def false : Bool =
    λp λt λf f

  def not : ∀(b : Bool) Bool =
    λb λp λt λf (((b p) f) t)

  def Equal : ∀(t: Type) ∀(a: t) ∀(b: t) Type =
    λt λa λb
    ∀ (p: ∀(b: t) Type)
    ∀ (r: (p a))
    (p b)

  def refl : ∀(t: Type) ∀(a: t) (((Equal t) a) a) =
    λt λa λp λr r

  def test : (((Equal Bool) true) (not false)) =
    ((refl Bool) true)

  test
")

(Main n) =
  Test2
