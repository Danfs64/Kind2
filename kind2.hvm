// #############################################################################
// # Prelude                                                                   #
// #############################################################################



// U32
// ===

// (If U32 a a) : a
(IsOne 0) = False
(IsOne 1) = True



// Bool
// ====

(If False t f) = f
(If True  t f) = t



// Pair
// ====

// (PairGet (Pair a b) (∀a ∀b c)) : c
(PairGet (Pair x y) fn) = (fn x y)
(PairFst (Pair x y)) = x
(PairSnd (Pair x y)) = y



// Pair
// ====

// (TripleGet (Triple a b c) (∀a ∀b λc d)) : d
(TripleGet (Triple x y z) fn) = (fn x y z)



// Maybe
// =====

// (Default (Maybe a) a) : a
(Default None     y) = y
(Default (Some x) y) = x

(ToMaybe 0 x) = None
(ToMaybe 1 x) = (Some x)

// (Perhaps (Maybe a) (∀a (Maybe b))) : (Maybe b)
(Perhaps None     b) = None
(Perhaps (Some a) b) = (b a)

// (MaybeMap (Maybe a) (∀a b)) : (Maybe b)
(MaybeMap (Some a) f) = (Some (f a))
(MaybeMap None     f) = None

// (Maybe.Case (Maybe a) (∀a p) p) : p
(Maybe.Case (Some x) case_none case_some) = (case_some x)
(Maybe.Case None     case_none case_some) = case_none



// List
// ====

// (Find (∀a (Maybe b)) (List a)) : (Maybe b)
(Find cond Nil)             = None
(Find cond (Cons x xs))     = (FindGo (cond x) cond xs)
  (FindGo None     cond xs) = (Find cond xs)
  (FindGo (Some x) cond xs) = (Some x)

// (ListMap (List a) (∀a b)) : (List b)
(ListMap Nil         f) = Nil
(ListMap (Cons x xs) f) = (Cons (f x) (ListMap xs f))

// Concatenates two lists
// (Concat a:(List a) b:(List a)) : (List a)
(Concat Nil         ys) = ys
(Concat (Cons x xs) ys) = (Cons x (Concat xs ys))


// String
// ======

// The new line string: "\n"
// NewLine : String
NewLine = (StrCons 10 StrNil)

// Returns true if a string is empty
// (StrIsEmpty String) : Bool
(StrIsEmpty StrNil)         = True
(StrIsEmpty (StrCons x xs)) = False

// Concatenates two strings
// (StrConcat a:String b:String) : String
(StrConcat StrNil         ys) = ys
(StrConcat (StrCons x xs) ys) = (StrCons x (StrConcat xs ys))

// Concatenates a list of strings
// (StrFlatten a:(List String)) : String
(StrFlatten Nil)         = StrNil
(StrFlatten (Cons x xs)) = (StrConcat x (StrFlatten xs))

// Returns true if two strings are equal
// (StrEqual (List String) (List String)) : U32
(StrEqual StrNil         StrNil)         = 1
(StrEqual (StrCons x xs) (StrCons y ys)) = (& (== x y) (StrEqual xs ys))
(StrEqual xs             ys)             = 0

// Todo: improve this
// (StrHash String) : String
(StrHash str) = (StrHashGo str 0)
  (StrHashGo StrNil         hash) = hash
  (StrHashGo (StrCons x xs) hash) = (StrHashGo xs (+ (- (<< hash 5) hash) x))

// StrJoin
(StrJoin Nil          sep) = ""
(StrJoin (Cons x Nil) sep) = x
(StrJoin (Cons x xs)  sep) = (StrFlatten [x sep (StrJoin xs sep)])



// Array
// =====

(Array.Empty) = (Array 0 Braun.Tip)

(Array.Push (Array n t) v) = (Array (+ n 1) (Braun.Push.go (+ n 1) (& (+ n 1) 1) t v))
  (Braun.Push.go 1 o t v)                 = (Braun.Tie Braun.Tip v Braun.Tip)
  (Braun.Push.go n 0 (Braun.Tie l x r) v) = (Braun.Tie (Braun.Push.go (>> n 1) (& (>> n 1) 1) l v) x r)
  (Braun.Push.go n 1 (Braun.Tie l x r) v) = (Braun.Tie l x (Braun.Push.go (>> n 1) (& (>> n 1) 1) r v))
  (Braun.Push n t v)                      = (Braun.Push.go n (& n 1) t v)

(Array.Pop (Array n t)) = (Array (- n 1) (Braun.Pop.go n (& n 1) t))
  (Braun.Pop.go 1 o t)                 = (Braun.Tip)
  (Braun.Pop.go n 0 (Braun.Tie l x r)) = (Braun.Tie (Braun.Pop.go (>> n 1) (& (>> n 1) 1) l) x r)
  (Braun.Pop.go n 1 (Braun.Tie l x r)) = (Braun.Tie l x (Braun.Pop.go (>> n 1) (& (>> n 1) 1) r))

(Array.Mut (Array size t) i f) = (Array.Mut.aux (< i size) i f size t)
  (Array.Mut.aux 0 i f size t) = (Array size t)
  (Array.Mut.aux 1 i f size t) = (Array size (Braun.Mut.go (+ i 1) f (& (+ i 1) 1) t))
  (Braun.Mut.go 1 f o (Braun.Tie l x r)) = (Braun.Tie l (f x) r)
  (Braun.Mut.go i f 0 (Braun.Tie l x r)) = (Braun.Tie (Braun.Mut.go (>> i 1) f (& (>> i 1) 1) l) x r)
  (Braun.Mut.go i f 1 (Braun.Tie l x r)) = (Braun.Tie l x (Braun.Mut.go (>> i 1) f (& (>> i 1) 1) r))

(Array.Set (Array size t) i v) = (Array.Mut (Array size t) i λx(v))

(Array.Get (Array size t) idx) = (Array.Get.aux (< idx size) idx t)
  (Array.Get.aux 0 idx t) = (None)
  (Array.Get.aux 1 idx t) = (Some (Braun.Get.go (+ idx 1) (& (+ idx 1) 1) t))
  (Braun.Get.go 1 o (Braun.Tie l x r))   = x
  (Braun.Get.go idx 0 (Braun.Tie l x r)) = (Braun.Get.go (>> idx 1) (& (>> idx 1) 1) l)
  (Braun.Get.go idx 1 (Braun.Tie l x r)) = (Braun.Get.go (>> idx 1) (& (>> idx 1) 1) r)

(Array.Got (Array size t) idx) = (Array.Got.aux (< idx size) idx size t)
  (Array.Got.aux 0 idx size t) = (Pair (Array size t) (None))
  (Array.Got.aux 1 idx size t) = ((Braun.Got.go (+ idx 1) (& (+ idx 1) 1) t) λt λv (Pair (Array size t) (Some v)))
  (Braun.Got.go 1 o (Braun.Tie l x r)) = λt (t (Braun.Tie l x r) x)
  (Braun.Got.go i 0 (Braun.Tie l x r)) = ((Braun.Got.go (>> i 1) (& (>> i 1) 1) l) λl λv λt (t (Braun.Tie l x r) v))
  (Braun.Got.go i 1 (Braun.Tie l x r)) = ((Braun.Got.go (>> i 1) (& (>> i 1) 1) r) λr λv λt (t (Braun.Tie l x r) v))

(Array.Size (Array size tree)) = (Pair (Array size tree) size)

//(Array.Ini arr k v f)          = (Array.Ini.Got (Array.Get arr k) k v f)
  //(Array.Ini.Got (Pair arr None)     k v f) = (Array.Set arr k v)
  //(Array.Ini.Got (Pair arr (Some x)) k v f) = (Array.Set arr k (f x))

// (Array.Range U32) : Array<U32>
(Array.Range 0) = Array.Empty
(Array.Range n) = (Array.Push (Array.Range (- n 1)) (- n 1))


// Map
// ===

//type U32Map <A: Type> {
  //empty
  //value(val: A),
  //branch(lft: U32Map<A>, rgt: U32Map<A>),
//}

// (Get (Tree a) U32) : (Pair Tree (Maybe a))
(Get tree key) = (GetGo 32 tree key (λx x))
  (GetGo n Empty            key self) = (Pair (self Empty) None)
  (GetGo n (Entry val)      key self) = (Pair (self (Entry val)) (Some val))
  (GetGo n (Nodes lft rgt)  key self) = (GetGoNodes (& (>> key (- n 1)) 1) (- n 1) key lft rgt self)
    (GetGoNodes 0 n key lft rgt self) = (GetGo n lft key λx(self (Nodes x rgt)))
    (GetGoNodes 1 n key lft rgt self) = (GetGo n rgt key λx(self (Nodes lft x)))

(Del tree key) = (DelGo 32 tree key)
  (DelGo n (Nodes lft rgt) key)  = (DelGoNodes (& (>> key (- n 1)) 1) (- n 1) lft rgt key)
    (DelGoNodes 0 n lft rgt key) = (Nodes (DelGo n lft key) rgt)
    (DelGoNodes 1 n lft rgt key) = (Nodes lft (DelGo n rgt key))
  (DelGo n tree key)             = Empty

(Set tree key val) = (SetGo 32 tree key val)
  (SetGo 0 tree             key val) = (Entry val)
  (SetGo n Empty            key val) = (SetGoEmpty (& (>> key (- n 1)) 1) (- n 1) key val)
    (SetGoEmpty 0 n key         val) = (Nodes (SetGo n Empty key val) Empty)
    (SetGoEmpty 1 n key         val) = (Nodes Empty (SetGo n Empty key val))
  (SetGo n (Nodes lft rgt)  key val) = (SetGoNodes (& (>> key (- n 1)) 1) (- n 1) key lft rgt val)
    (SetGoNodes 0 n key lft rgt val) = (Nodes (SetGo n lft key val) rgt)
    (SetGoNodes 1 n key lft rgt val) = (Nodes lft (SetGo n rgt key val))

(Mut tree key fun) = (MutGo 32 tree key fun)
  (MutGo 0 (Entry x)        key fun) = (Entry (fun x))
  (MutGo 0 tree             key fun) = tree
  (MutGo n Empty            key fun) = (MutGoEmpty (& (>> key (- n 1)) 1) (- n 1) key fun)
    (MutGoEmpty 0 n key         fun) = (Nodes (MutGo n Empty key fun) Empty)
    (MutGoEmpty 1 n key         fun) = (Nodes Empty (MutGo n Empty key fun))
  (MutGo n (Nodes lft rgt)  key fun) = (MutGoNodes (& (>> key (- n 1)) 1) (- n 1) key lft rgt fun)
    (MutGoNodes 0 n key lft rgt fun) = (Nodes (MutGo n lft key fun) rgt)
    (MutGoNodes 1 n key lft rgt fun) = (Nodes lft (MutGo n rgt key fun))

//(IniMut tree key ini fun) = (IniMutGo 32 tree key ini fun)
  //(IniMutGo 0 (Entry x)        key ini fun) = (Entry (fun x))
  //(IniMutGo 0 tree             key ini fun) = (Entry (fun ini))
  //(IniMutGo n Empty            key ini fun) = (IniMutGoEmpty (& (>> key (- n 1)) 1) (- n 1) key ini fun)
    //(IniMutGoEmpty 0 n key         ini fun) = (Nodes (IniMutGo n Empty key ini fun) Empty)
    //(IniMutGoEmpty 1 n key         ini fun) = (Nodes Empty (IniMutGo n Empty key ini fun))
  //(IniMutGo n (Nodes lft rgt)  key ini fun) = (IniMutGoNodes (& (>> key (- n 1)) 1) (- n 1) key lft rgt ini fun)
    //(IniMutGoNodes 0 n key lft rgt ini fun) = (Nodes (IniMutGo n lft key ini fun) rgt)
    //(IniMutGoNodes 1 n key lft rgt ini fun) = (Nodes lft (IniMutGo n rgt key ini fun))

(ListToMap list) = (ListToMapGo list Empty)
  (ListToMapGo (Cons (Pair key val) xs) map) = (ListToMapGo xs (Set map key val))
  (ListToMapGo Nil                      map) = map

(MapToList val) = ((MapToListGo val 0) Nil)
  (MapToListGo Empty           key) = λx x
  (MapToListGo (Entry val)     key) = λx (Cons (Pair key val) x)
  (MapToListGo (Nodes lft rgt) key) = λx ((MapToListGo lft (* key 2)) ((MapToListGo rgt (+ (* key 2) 1)) x))



// #############################################################################
// # Parser Combinators                                                        #
// #############################################################################



// Parser
// ======

// Code : Type
// Code = String

// Answer : Type -> Type
// Answer A = Parsed Code A | Failed String

// Parser : Type -> Type
// Parser A = Code -> Answer A

// (IsNameChar Char) : U32
(IsNameChar chr) =
  let is_letter = (| (& (<= 'a' chr) (<= chr 'z')) (& (<= 'A' chr) (<= chr 'Z')))
  let is_number = (& (<= '0' chr) (<= chr '9'))
  let is_symbol = (& (== '_' chr) (== '.' chr))
  (| is_letter (| is_number is_symbol))

// (IsUpper Char) : U32
(IsUpper chr) =
  (& (<= 'A' chr) (<= chr 'Z'))

// (IsLower Char) : U32
(IsLower chr) =
  (& (<= 'a' chr) (<= chr 'z'))

// (Bind a_parser:(Parser a) b_parser:(∀a (Parser B))) : (Parser B)
(Bind a_parser b_parser) = λcode (BindGo b_parser (a_parser code))
  (BindGo b_parser (Parsed code a_val)) = (b_parser a_val code)
  (BindGo b_parser (Failed err))        = (Failed err)

// (Done val:a) : (Parser a)
(Done value) = λcode (Parsed code value)

// (IsSpace Char) : U32
(IsSpace chr) = (| (== 10 chr) (== ' ' chr))

// (GetName String) : (Pair code:String name:String)
(GetName)                             = λcode (GetNameGo code)
  (GetNameGo StrNil)                  = (Pair StrNil StrNil)
  (GetNameGo (StrCons head tail))     = (GetName_1 (IsNameChar head) head tail)
    (GetName_1 0 head tail)           = (Pair (StrCons head tail) StrNil)
    (GetName_1 1 head tail)           = (GetName_2 head (GetNameGo tail))
    (GetName_2 head (Pair code name)) = (Pair code (StrCons head name))

// (Matcher text:String) : (Parser Bool)
(Matcher consume text) = λcode (MatcherGo text code consume λx(x))
  (MatcherGo Nil         ys             consume redo) = (Parsed ((If consume λx(x) redo) ys) True)
  (MatcherGo (Cons x xs) StrNil         consume redo) = (Parsed (redo Nil) False)
  (MatcherGo (Cons x xs) (StrCons y ys) consume redo) = (MatcherTest (x y) xs y ys consume redo)
    (MatcherTest 0 xs y ys consume redo) = (Parsed (redo (StrCons y ys)) False)
    (MatcherTest 1 xs y ys consume redo) = (MatcherGo xs ys consume λk(redo (StrCons y k)))

// (TextComparer String) : (∀Char Bool)
(TextComparer StrNil)         = Nil
(TextComparer (StrCons x xs)) = (Cons λc(== x c) (TextComparer xs))

// (PeekCondsHere conds:(∀Char Bool)) : (Parser Bool)
(PeekCondsHere conds) = λcode ((Matcher False conds) code)

//// (PeekConds conds:(∀Char Bool)) : (Parser Bool)
(PeekConds conds) = λcode ((Matcher False conds) (SkipSpaces code))

// (PeekTextHere text:String) : (Parser Bool)
(PeekTextHere text) = λcode ((Matcher False (TextComparer text)) code)

// (PeekText text:String) : (Parser Bool)
(PeekText text) = λcode ((Matcher False (TextComparer text)) (SkipSpaces code))

// (MatchCondsHere conds:(∀Char Bool)) : (Parser Bool)
(MatchCondsHere conds) = λcode ((Matcher True conds) code)

// (MatchConds conds:(∀Char Bool)) : (Parser Bool)
(MatchConds conds) = λcode ((Matcher True conds) (SkipSpaces code))

// (MatchTextHere text:String) : (Parser Bool)
(MatchTextHere text) = λcode ((Matcher True (TextComparer text)) code)

// (MatchText text:String) : (Parser Bool)
(MatchText text) = λcode ((Matcher True (TextComparer text)) (SkipSpaces code))

// (TestChar cond:(∀Char Bool)) : (Parser Bool)
(TestChar cond) = λcode ((TestCharHere cond) (SkipSpaces code))

// (ParseTextHere text:String) : (Parser Unit)
(ParseTextHere text)      = (Bind (MatchTextHere text) λgot(ParseTextHereGot got))
  (ParseTextHereGot False) = λcode (Failed "Syntax error.") // TODO: show expected
  (ParseTextHereGot True)  = (Done Unit)

// (ParseText text:String) : (Parser Unit)
(ParseText text) = λcode ((ParseTextHere text) (SkipSpaces code))

// (SkipSpaces String) : String
(SkipSpaces StrNil)         = StrNil
(SkipSpaces (StrCons x xs)) = (SkipSpacesTest (IsSpace x) x xs)
  (SkipSpacesTest 0 x xs)   = (StrCons x xs)
  (SkipSpacesTest 1 x xs)   = (SkipSpaces xs)

// (ParseNameHere) : (Parser String)
ParseNameHere                        = λcode (ParseNameHere_0 ((GetName) code))
  (ParseNameHere_0 (Pair code name)) = (Parsed code name)

// (ParseName) : (Parser String)
ParseName = λcode ((ParseNameHere) (SkipSpaces code))

// (ParseEnd) : (Parser Bool)
ParseEnd = λcode (ParseEndGo code)
  (ParseEndGo StrNil)         = (Parsed Nil True)
  (ParseEndGo (StrCons x xs)) = (Parsed (StrCons x xs) False)

// Parses until a stop condition is true.
// (ParseUntil parser:(Parser a) stop:(Parser Bool)) : (Parser (List a))
(ParseUntil stop parser) = (Bind stop λs (ParseUntilGo s stop parser))
  (ParseUntilGo False stop parser) =
    (Bind parser                   λhead 
    (Bind (ParseUntil stop parser) λtail 
    (Done (Cons head tail))))
  (ParseUntilGo True stop parser) =
    (Done Nil)

// (Grammar choices:(List (Parser (Maybe a)))) : (Parser a)
(Grammar Nil)                                     = λcode (Failed "Expected...")
(Grammar (Cons choice choices))                   = λcode (Grammar_0 (choice code) choices)
  (Grammar_0 (Failed err)                choices) = (Failed err)
  (Grammar_0 (Parsed code None)          choices) = ((Grammar choices) code)
  (Grammar_0 (Parsed code (Some result)) choices) = (Parsed code result)

// Note: unlike Rust's version, this won't rollback
// (Guard head:(Parser Bool) body:(Parser a)) : (Parser (Maybe a))
(Guard head body) = λcode (Guard_0 (head code) body)
  (Guard_0 (Failed err)          body) = (Failed err)
  (Guard_0 (Parsed code False)   body) = (Parsed code None)
  (Guard_0 (Parsed code True)    body) = ((Bind body λgot(Done (Some got))) code)



// #############################################################################
// # Kind2                                                                     #
// #############################################################################



// Parsing
// -------

// (ParseVar) : (Parser (Maybe Term))
(ParseVar) = (Bind ParseName λname (ParseVar_0 name))
  (ParseVar_0 StrNil        ) = (Done None)
  (ParseVar_0 (StrCons x xs)) = (Done (Some (Var (StrCons x xs))))

// (ParseTyp) : (Parse (Maybe Term))
(ParseTyp) = (Guard (MatchText "Type")
  (Done Typ))

// (ParseAnn) : (Parse (Maybe Term))
(ParseAnn) = (Guard (MatchText "{")
  (Bind ParseTerm       λxval
  (Bind (ParseText ":") λskip
  (Bind ParseTerm       λxtyp
  (Bind (ParseText "}") λskip
  (Done (Ann xval xtyp)))))))

// (ParseDef) : (Parser (Maybe Term))
(ParseDef) = (Guard (MatchText "def ")
  (Bind ParseName   λname
  (Bind (MatchText ":") λanns
  (ParseDefAnn anns name))))
(ParseDefAnn True name) =
  (Bind ParseTerm       λtype
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Subst name (Ann expr type) body))))))
(ParseDefAnn False name) =
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Subst name expr body)))))

// (ParseLet) : (Parser (Maybe Term))
(ParseLet) = (Guard (MatchText "let ")
  (Bind ParseName   λname
  (Bind (MatchText ":") λanns
  (ParseLetAnn anns name))))
(ParseLetAnn True name) =
  (Bind ParseTerm       λtype
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Let name (Ann expr type) body))))))
(ParseLetAnn False name) =
  (Bind (ParseText "=") λskip
  (Bind ParseTerm       λexpr
  (Bind ParseTerm       λbody
  (Done (Let name expr body)))))

// (ParseAll) : (Parse (Maybe Term))
(ParseAll) = (Guard (MatchText "∀")
  (Bind (ParseText "(")  λskip
  (Bind ParseName        λname
  (Bind (ParseText ":")  λskip
  (Bind ParseTerm        λtype
  (Bind (ParseText ")")  λskip
  (Bind ParseTerm        λbody
  (Done (All name type body)))))))))

// (ParseLam) : (Parser (Maybe Term))
(ParseLam) = (Guard (MatchText "λ")
  (Bind ParseName λname
  (Bind ParseTerm λbody
  (Done (Lam name body)))))

// (ParseApp) : (Parser (Maybe Term)) 
(ParseApp) = (Guard (MatchText "(")
  (Bind ParseTerm       λfunc
  (Bind ParseTerm       λargm
  (Bind (ParseText ")") λx
  (Done (App func argm))))))

// (ParseApp) : (Parser (Maybe Term)) 
(ParseCtr) = (Guard (PeekConds [λx(== x '(') λx(IsUpper x)])
  (Bind (ParseText "(")                        λskip
  (Bind ParseName                              λname
  (Bind (ParseUntil (MatchText ")") ParseTerm) λargs
  (Done (Ctr name args))))))

// (ParseMet) : (Parser (Maybe Term))
(ParseMet) = (Guard (MatchText "_")
  (Bind ParseName λname
  (Done (Met (StrHash name)))))

// (ParseTerm) : (Parser Term)
(ParseTerm) = (Grammar [
  ParseDef,
  ParseLet,
  ParseAnn,
  ParseCtr,
  ParseAll,
  ParseLam,
  ParseApp,
  ParseTyp,
  ParseMet,
  ParseVar,
])

// (GetCtrId Term) : U32
(GetCtrId (Ctr ctid args)) = ctid
(GetCtrId term)            = "?"

// (ParseDecl) : (Parser Decl)
(ParseDecl) =
  (Bind ParseTerm       λlhs
  (Bind (MatchText ":") λtyp
  (ParseDecl_rhs typ lhs)))
(ParseDecl_rhs True lhs) = 
  (Bind ParseTerm λrhs
  (Done (DefType lhs rhs)))
(ParseDecl_rhs False lhs) =
  (Bind (ParseText "=") λskp
  (Bind ParseTerm       λrhs
  (Done (DefRule lhs rhs))))

// (ParseDecls) : (Parser (List Decl))
(ParseDecls) = (ParseUntil
  λcode((ParseEnd) (SkipSpaces code))
  ParseDecl)

// (ReadTerm NameToId IdToName String) : Term
(ReadTerm n2i i2n code) = ((GenIds (ReadTermGot ((ParseTerm) code)) n2i i2n) λn2i λi2n λterm term)
  (ReadTermGot (Parsed code term)) = term
  (ReadTermGot (Failed err))       = (Var (StrConcat "[ParseError] " err))

// (ReadFile String) : (Tuple NameTable File)
(ReadFile code) = (ReadFileGot ((ParseDecls) code))
  (ReadFileGot (Parsed code decls)) = (FileMake Empty Array.Empty decls)
  (ReadFileGot (Failed err))        = (StrConcat "[ParseError] " err) // FIXME ill-typed



// Name Table
// ----------

// Converts every ctr name into a sequential id.
// (GenIds NameToId IdToName Term) : (Tuple3 NameToId IdToName Term)
(GenIds (Var name) n2i i2n) =
  λt (t n2i i2n (Var name))
(GenIds (Met hash) n2i i2n) =
  λt (t n2i i2n (Met hash))
(GenIds Typ n2i i2n) =
  λt (t n2i i2n Typ)
(GenIds (Ann xval xtyp) n2i i2n) =
  ((GenIds xval n2i i2n) λn2i λi2n λxval
  ((GenIds xtyp n2i i2n) λn2i λi2n λxtyp
  λt (t n2i i2n (Ann xval xtyp))))
(GenIds (Let name expr body) n2i i2n) =
  ((GenIds expr n2i i2n) λn2i λi2n λexpr
  ((GenIds body n2i i2n) λn2i λi2n λbody
  λt (t n2i i2n (Let name expr body))))
(GenIds (All name type body) n2i i2n) =
  ((GenIds type n2i i2n) λn2i λi2n λtype
  ((GenIds body n2i i2n) λn2i λi2n λbody
  λt (t n2i i2n (All name type body))))
(GenIds (Lam name body) n2i i2n) =
  ((GenIds body n2i i2n) λn2i λi2n λbody
  λt (t n2i i2n (Lam name body)))
(GenIds (App func argm) n2i i2n) =
  ((GenIds func n2i i2n) λn2i λi2n λfunc
  ((GenIds argm n2i i2n) λn2i λi2n λargm
  λt (t n2i i2n (App func argm))))
(GenIds (Ctr name args) n2i i2n) =
  let hash = (StrHash name)
  (PairGet (Get n2i hash) λn2i λgot
  (GenIds.Got got name hash args n2i i2n))
(GenIds.Got None name hash args n2i (Array size tree)) =
  let n2i = (Set n2i hash size)
  let i2n = (Array.Push (Array size tree) name)
  let ctr = size
  let num = (+ size 1)
  ((GenIds.Many args n2i i2n) λn2i λi2n λargs
  λt (t n2i i2n (Ctr ctr args)))
(GenIds.Got (Some ctid) name hash args n2i i2n) =
  ((GenIds.Many args n2i i2n) λn2i λi2n λargs
  λt (t n2i i2n (Ctr ctid args)))
(GenIds.Many Nil n2i i2n) =
  λt (t n2i i2n Nil)
(GenIds.Many (Cons head tail) n2i i2n) =
  ((GenIds      head n2i i2n) λn2i λi2n λhead
  ((GenIds.Many tail n2i i2n) λn2i λi2n λtail
  λt (t n2i i2n (Cons head tail))))

// File
// ----

// type Decl {
//   DefType(lhs:Term, rhs:Term)
//   DefRule(lhs:Term, rhs:Term)
// }

// data Type {
//   lhs: Term
//   rhs: Term
// }

// data Rule {
//   lhs: Term
//   rhs: Term
// }

// data Entry {
//   type: (Pair Term Term)
//   rules: List<Rule>
// }

// type File = Array Entry

// EntryEmpty : Entry
EntryEmpty = (NewEntry (Pair (Var "?") (Var "?")) [])

// (EntrySetType entry:Entry new_type:Type) : Entry
(EntrySetType (NewEntry type rules) new_type) = (NewEntry new_type rules)

// (EntrySetType entry:Entry new_rule:Rule) : Entry
(EntryAddRule (NewEntry type rules) new_rule) = (NewEntry type (Cons new_rule rules))

// (FileEmpty U32) : File
(FileEmpty 0) = Array.Empty
(FileEmpty n) = (Array.Push (FileEmpty (- n 1)) EntryEmpty)

(FileMake n2i (Array i2n.size i2n.tree) Nil) = 
  λt (t n2i (Array i2n.size i2n.tree) (FileEmpty i2n.size))
(FileMake n2i i2n (Cons (DefType lhs rhs) decls)) =
  (PairGet (GenIds lhs n2i i2n) λn2i λi2n λlhs
  (PairGet (GenIds rhs n2i i2n) λn2i λi2n λrhs
  ((FileMake n2i i2n decls)     λn2i λi2n λfile
  let ctid = (GetCtrId lhs)
  let func = λentry (EntrySetType entry (DefType lhs rhs))
  λt (t n2i i2n (Array.Mut file ctid func)))))
(FileMake n2i i2n (Cons (DefRule lhs rhs) decls)) =
  ((GenIds lhs n2i i2n)     λn2i λi2n λlhs
  ((GenIds rhs n2i i2n)     λn2i λi2n λrhs
  ((FileMake n2i i2n decls) λn2i λi2n λfile
  let ctid = (GetCtrId lhs)
  let func = λentry (EntryAddRule entry (DefRule (CacheUses lhs rhs) rhs))
  λt (t n2i i2n (Array.Mut file ctid func)))))

(CacheUses (Var name)      rhs) = (Var name (Uses name rhs))
(CacheUses (Ctr ctid vars) rhs) = (Ctr ctid (CacheUsesMany vars rhs))

(CacheUsesMany Nil         rhs) = Nil
(CacheUsesMany (Cons x xs) rhs) = (Cons (CacheUses x rhs) (CacheUsesMany xs rhs))

// Stringifying
// ------------

// (Show term:Term) : String
(Show term) = ((ShowGo term) "")
  (ShowGo (Var name)) =
    λx((ShowGoStr name)
      x)
  (ShowGo (Met hash)) =
    λx((ShowGoStr "_")
      ((ShowGoStr (ShowU32 hash))
      x))
  (ShowGo (Let name expr body)) =
    λx((ShowGoStr "let ")
      ((ShowGoStr name)
      ((ShowGoStr " = ")
      ((ShowGo expr)
      ((ShowGoStr "; ")
      ((ShowGo body)
      x))))))
  (ShowGo (Ann xval xtyp)) =
    λx((ShowGoStr "{")
      ((ShowGo xval)
      ((ShowGoStr " : ")
      ((ShowGo xtyp)
      ((ShowGoStr "}")
      x)))))
  (ShowGo Typ) =
    λx((ShowGoStr "Type")
      x)
  (ShowGo (All name type body)) =
    λx((ShowGoStr "∀(")
      ((ShowGoStr name)
      ((ShowGoStr ": ")
      ((ShowGo type)
      ((ShowGoStr ") ")
      ((ShowGo body)
      x))))))
  (ShowGo (Lam name body)) =
    λx((ShowGoStr "λ")
      ((ShowGoStr name)
      ((ShowGoStr " ")
      ((ShowGo body)
      x))))
  (ShowGo (App func argm)) =
    λx((ShowGoStr "(")
      ((ShowGo func)
      ((ShowGoStr " ")
      ((ShowGo argm)
      ((ShowGoStr ")")
      x)))))
  (ShowGo (Ctr ctid args)) =
    λx((ShowGoStr "(")
      ((ShowGoStr (ShowU32 ctid)) // todo: use nametable
      ((ShowGoMany args)
      ((ShowGoStr ")")
      x))))
  (ShowGoMany Nil) =
    λx x
  (ShowGoMany (Cons t ts)) =
    λx((ShowGoStr " ")
      ((ShowGo t)
      ((ShowGoMany ts)
      x)))
  (ShowGoStr xs) =
    λx(StrConcat xs x)

// (ShowU32 U32) : String
(ShowU32 n) = (ShowU32Build n StrNil)
  (ShowU32Build n str) = 
    let next = (StrCons (+ 48 (% n 10)) str)
    ((If (IsOne (< n 10)) λx(x) λx(ShowU32Build (/ n 10) x)) next)

// (ShowEquations (List (Pair HTerm HTerm)) : String
(ShowEquations Nil) = ""
(ShowEquations (Cons (Pair a b) eqs)) =
  (StrFlatten [
    "- "
    (Show (Low a))
    " == "
    (Show (Low b))
    NewLine
    (ShowEquations eqs)
  ])

// (ShowSubst Subst) : String
(ShowSubst Nil) = ""
(ShowSubst (Cons (Pair name value) subst)) =
  (StrFlatten [
    "- "
    (ShowU32 name)
    " <- "
    (Show (Low value))
    NewLine
    (ShowSubst subst)
  ])



// Substitution
// ------------

// Used for parse-time subst (def), NOT by the evaluator/checker!
// (Subst String Term Term) : Term
(Subst nm val (Var name))           = (If (IsOne (StrEqual name nm)) val (Var name))
(Subst nm val (Met hash))           = (Met hash)
(Subst nm val Typ)                  = Typ
(Subst nm val (Ann xval xtyp))      = (Ann (Subst nm val xval) (Subst nm val xtyp))
(Subst nm val (Let name expr body)) = (Let name (Subst nm val expr) (SubstBody nm val name body))
(Subst nm val (All name type body)) = (All name (Subst nm val type) (SubstBody nm val name body))
(Subst nm val (Lam name body))      = (Lam name (SubstBody nm val name body))
(Subst nm val (App func argm))      = (App (Subst nm val func) (Subst nm val argm))
(Subst nm val (Ctr ctid args))      = (Ctr ctid (Map args λx(Subst nm val x)))

// (SubstBody String Term String Term) : Term
(SubstBody nm val name body) = (SubstBodyGo (StrEqual nm name) nm val body)
  (SubstBodyGo 0 nm val body) = (Subst nm val body)
  (SubstBodyGo 1 nm val body) = body



// Evaluation
// ----------

// Counts free occurrences of a name
// (Uses String Term) : U32
(Uses nm (Var name))           = (StrEqual name nm)
(Uses nm (Met hash))           = 0
(Uses nm Typ)                  = 0
(Uses nm (Ann xval xtyp))      = (Uses nm xval)
(Uses nm (Let name expr body)) = (+ (Uses nm expr) (UsesShadow (StrEqual nm name) nm body))
(Uses nm (All name type body)) = (+ (Uses nm type) (UsesShadow (StrEqual nm name) nm body))
(Uses nm (Lam name body))      = (UsesShadow (StrEqual nm name) nm body)
(Uses nm (App func argm))      = (+ (Uses nm func) (Uses nm argm))
(Uses nm (Ctr ctid args))      = (UsesMany nm args)
  (UsesMany nm Nil)            = 0
  (UsesMany nm (Cons x xs))    = (+ (Uses nm x) (UsesMany nm xs))
(UsesShadow 0 nm body)         = (Uses nm body)
(UsesShadow 1 nm body)         = 0

// Appends N copies of a term to a vars context
// (Clone U32 String a (List (Pair String a))) : (List (Pair String a))
(Clone 0 name term ctx) = ctx
(Clone 1 name term ctx) = (Cons (Pair name term) ctx)
(Clone n name term ctx) = (Cons (Pair name term) (Clone (- n 1) name term ctx))

// Converts a term to high-order
// TODO linearize file
// (High file:File term:Term) : HTerm
(High file term) = (TripleGet (HighGo term file Nil) λfile λvars λterm term)

  // (HighGo file:File term:Term file:File vars:(List (Pair String HTerm))) : (Triple File (List (Pair String HTerm)) HTerm)
  (HighGo (Var name) file vars) = (HighFind name file vars)
    (HighFind name file Nil) = (Triple file Nil (HVar name))
    (HighFind name file (Cons (Pair var val) vars)) = (HighFound (StrEqual name var) name var val file vars)
      (HighFound 1 name var val file vars) = (Triple file vars val)
      (HighFound 0 name var val file vars) = (TripleGet (HighFind name file vars) λfile λvars λgot (Triple file (Cons (Pair var val) vars) got))
  (HighGo (Ann xval xtyp) file vars) =
    (HighGo xval file vars)
  (HighGo Typ file vars) =
    (Triple file vars HTyp)
  (HighGo (All name type body) file vars) =
    (TripleGet (HighGo type file vars) λfile λvars λtype
    (TripleGet (HighGo body file (Clone (Uses name body) name $x vars)) λfile λvars λbody
    (Triple file vars (HAll type λ$x body))))
  (HighGo (Let name expr body) file vars) =
    (TripleGet (HighGo expr file vars) λfile λvars λexpr
    (TripleGet (HighGo body file (Clone (Uses name body) name expr vars)) λfile λvars λbody
    (Triple file vars body)))
  (HighGo (Lam name body) file vars) =
    (TripleGet (HighGo body file (Clone (Uses name body) name $x vars)) λfile λvars λbody
    (Triple file vars (HLam λ$x body)))
  (HighGo (App func argm) file vars) =
    (TripleGet (HighGo func file vars) λfile λvars λfunc
    (TripleGet (HighGo argm file vars) λfile λvars λargm
    (Triple file vars (HApply func argm))))
  (HighGo (Ctr ctid args) file vars) =
    (TripleGet (HighGoMany args file vars) λfile λvars λargs
      (PairGet (Array.Got file ctid)       λfile λentry
      (HighGoRules entry ctid args file vars)))
    (HighGoRules (Some (NewEntry type rules)) ctid args file vars) = (HRules rules (HCtr ctid args) file vars)
    (HighGoRules None                         ctid args file vars) = (Triple file vars (HCtr ctid args))
  (HighGo (Met hash) file vars) =
    (Triple file vars (HMet hash))

  (HighGoMany Nil file vars) =
    (Triple file vars Nil)
  (HighGoMany (Cons x xs) file vars) =
    (TripleGet (HighGo     x  file vars) λfile λvars λhead
    (TripleGet (HighGoMany xs file vars) λfile λvars λtail
    (Triple file vars (Cons head tail))))

// TODO: perhaps linearize term?
// (HRules (List Rule) HTerm File Vars) : HTerm
(HRules Nil                            term file vars) = (Triple file vars term)
(HRules (Cons (DefRule lhs rhs) rules) term file vars) = (HRulesMatched (HMatchGo lhs term) rhs rules term file vars)
  (HRulesMatched None        rhs rules term file vars) = (HRules rules term file vars)
  (HRulesMatched (Some subs) rhs rules term file vars) = (HighGo rhs file (subs vars))

// (Match Term Term) : (Maybe (List (Pair String HTerm)))
(HMatch a b rhs) = (MaybeMap (HMatchGo a b) λx(x Nil))

  (HMatchGo (Ctr a_ctid a_args) (HCtr b_ctid b_args)) = (If (IsOne (== a_ctid b_ctid)) (HMatchGoMany a_args b_args) None)
  (HMatchGo (Var a_name uses)   b)                    = (Some λx(Clone uses a_name b x))
  (HMatchGo a                   b)                    = None

  (HMatchGoMany Nil Nil                ) = (Some λx x)
  (HMatchGoMany Nil         (Cons b bs)) = None
  (HMatchGoMany (Cons a ab) Nil        ) = None
  (HMatchGoMany (Cons a as) (Cons b bs)) =
    (Perhaps (HMatchGo     a  b ) λhead_subs
    (Perhaps (HMatchGoMany as bs) λtail_subs  
    (Some λx (head_subs (tail_subs x)))))

// High-order application
(HApply (HLam fbody) argm) = (fbody argm)
(HApply func         argm) = (HApp func argm)

// Converts a term to low-order
(Low term) = (LowGo term 0)

  (LowGo (HVar name) depth) =
    (Var name)
  (LowGo (HMet hash) depth) =
    (Met hash)
  (LowGo HTyp depth) =
    Typ
  (LowGo (HAll type body) depth) =
    let name = (StrCons (+ 97 depth) StrNil)
    let type = (LowGo type depth)
    let body = (LowGo (body (HVar name)) (+ depth 1))
    (All name type body)
  (LowGo (HLam body) depth) =
    let name = (StrCons (+ 97 depth) StrNil)
    let type = Typ
    let body = (LowGo (body (HVar name)) (+ depth 1))
    (Lam name body)
  (LowGo (HApp func argm) depth) =
    let func = (LowGo func depth)
    let argm = (LowGo argm depth)
    (App func argm)
  (LowGo (HCtr ctid args) depth) =
    let args = (LowGoMany args depth)
    (Ctr ctid args)

  (LowGoMany Nil         depth) = Nil
  (LowGoMany (Cons x xs) depth) = (Cons (LowGo x depth) (LowGoMany xs depth))

// Normalizes a term
(Normal file term) = (Low (High file term))



// Type-Checking
// -------------

// Result : Type -> Type
// Result A
//   = Ok (List (Pair HTerm HTerm)) A
//   | Err String

// Monadic bind function of the "Result" type
// (Chain a_parser:(Parser a) b_parser:(∀a (Parser B))) : (Parser B)
(Chain (Err str)    b_result) = (Err str)
(Chain (Ok eqs val) b_result) = (b_result eqs val)

// (InferGo File Term Ctx) : (Result (Pair Subst Term))
(Infer file term) = (InferUnify (InferGo file term Nil Nil))
  (InferUnify (Err err))    = (Err err)
  (InferUnify (Ok eqs typ)) = (InferFinish (Unify eqs Empty) typ)

  (InferFinish (Err err)      typ) = (Err err)
  (InferFinish (Ok eqs subst) typ) = (Ok eqs (Pair subst (SubstHoles subst typ)))

  // TODO: linearize file? probably not needed
  (InferGo file (Var name) ctx eqs) = (InferGoFind name ctx eqs)
    (InferGoFind name Nil eqs) = (Err (StrConcat "Unbound: " name))
    (InferGoFind name (Cons (Pair var typ) ctx) eqs) = (InferGoFound (StrEqual name var) name typ ctx eqs)
      (InferGoFound 1 name typ ctx eqs) = (Ok eqs typ)
      (InferGoFound 0 name typ ctx eqs) = (InferGoFind name ctx eqs)
  (InferGo file (Met hash) ctx eqs) =
    (Ok eqs HTyp)
  (InferGo file Typ ctx eqs) =
    (Ok eqs HTyp)
  (InferGo file (Ann xval xtyp) ctx eqs) =
    let htyp = (High file xtyp)
    (Chain (CheckGo file xtyp HTyp ctx eqs) λeqs λok
    (Chain (CheckGo file xval htyp ctx eqs) λeqs λok
    (Ok eqs htyp)))
  (InferGo file (All name type body) ctx eqs) =
    (Chain (CheckGo file type HTyp ctx eqs) λeqs λok
    (Chain (CheckGo file body HTyp (Cons (Pair name (High file type)) ctx) eqs) λeqs λok
    (Ok eqs HTyp)))
  (InferGo file (Let name expr body) ctx eqs) =
    (Chain (InferGo file expr ctx eqs) λeqs λexpr_t
    (InferGo file body (Cons (Pair name expr_t) ctx) eqs))
  (InferGo file (Lam name body) ctx eqs) =
    (Err "Can't infer lambda.")
  (InferGo file (App func argm) ctx eqs) =
    (Chain (InferGo file func ctx eqs) λeqs λft (InferGoApp file ft argm ctx eqs))
      (InferGoApp file (HAll ftype fbody) argm ctx eqs) =
        (Chain (CheckGo file argm ftype ctx eqs) λeqs λok
        (Ok eqs (fbody (High file argm))))
      (InferGoApp file other argm ctx eqs) =
        (Err ["Non-function application.", other, argm, ctx])
  (InferGo file (Ctr ctid args) ctx eqs) =
    (Ok eqs HTyp)
      
  // (CheckGo Term Term Ctx) : (Result Unit)
  (CheckGo file (Lam name body) (HAll t_type t_body) ctx eqs) = 
    (Chain (CheckGo file body (t_body (HVar name)) (Cons (Pair name t_type) ctx) eqs) λeqs λres
    (Ok eqs res))
  (CheckGo file term type ctx eqs) =
    (Chain (InferGo file term ctx eqs) λeqs λterm_t
    (Ok (Cons (Pair type term_t) eqs) Unit))

// FIXME: this will loop if we subst `a_hash <- (HMet a_hash)`, since the Equal
// rewrite rule will be called repeatedly. I don't have the time to reason about
// this right now, so I'll leave this to a future.
// (Equal HTerm HTerm U32) : (Pair Subst Bool)
(Equal (HVal a_numb) (HVal b_numb) depth subst) =
  (Pair subst (== a_numb b_numb))
(Equal (HVar a_name) (HVar b_name) depth subst) =
  (Pair subst (StrEqual a_name b_name))
(Equal HTyp HTyp depth subst) =
  (Pair subst 1)
(Equal (HAll a_type a_body) (HAll b_type b_body) depth subst) =
  (PairGet (Equal a_type b_type depth subst) λsubst λtype_eq
  (PairGet (Equal (a_body (HVal depth)) (b_body (HVal depth)) (+ depth 1) subst) λsubst λbody_eq
  (Pair subst (& type_eq body_eq))))
(Equal (HLam a_body) (HLam b_body) depth subst) =
  (PairGet (Equal (a_body (HVal depth)) (b_body (HVal depth)) (+ depth 1) subst) λsubst λbody_eq
  (Pair subst body_eq))
(Equal (HApp a_func a_argm) (HApp b_func b_argm) depth subst) =
  (PairGet (Equal a_func b_func depth subst) λsubst λfunc_eq
  (PairGet (Equal a_argm b_argm depth subst) λsubst λargm_eq
  (Pair subst (& func_eq argm_eq))))
(Equal (HMet a_hash) (HMet b_hash) depth subst) =
  (Pair subst 1)
(Equal (HMet a_hash) b depth subst) = (PairGet (Get subst a_hash) λsubst λgot_a (Equal.Got.0 a_hash got_a b depth subst))
  (Equal.Got.0 a_hash None     b depth subst) = (Pair (Set subst a_hash b) 1)
  (Equal.Got.0 a_hash (Some a) b depth subst) = (Equal a b depth subst)
(Equal a (HMet b_hash) depth subst) = (PairGet (Get subst b_hash) λsubst λgot_b (Equal.Got.1 b_hash a got_b depth subst))
  (Equal.Got.1 b_hash a None     depth subst) = (Pair (Set subst b_hash a) 1)
  (Equal.Got.1 b_hash a (Some b) depth subst) = (Equal a b depth subst)
(Equal a b depth subst) =
  (Pair subst 0)

// TODO: I don't want to commit to any complex unification algorithm, so this
// implementation will just substitute immediate (flex-rigid) terms, for now.
// In a future, we should revisit this, and decide what unification and
// resolution algorithms we want to have on the language.
// (Unify equations:(List (Pair HTerm HTerm)) substitutions:(Map HTerm)) : (Result (Map HTerm))
(Unify eqs subst) = (UnifyGo eqs subst Nil)
  (UnifyGo Nil subst Nil) =
    (Ok Nil subst)
  (UnifyGo Nil subst errs) =
    (Err (StrJoin (ListMap errs λx(x subst)) NewLine))
  (UnifyGo (Cons (Pair a b) eqs) subst errs) =
    (PairGet (Equal a b 0 subst) λsubst λeq
    (UnifyTest eq a b eqs subst errs))
  (UnifyTest 0 a b eqs subst errs) =
    let err = λsubst (StrFlatten [
      "Type mismatch." NewLine
      "- Expected: " (Show (Low (SubstHoles subst a))) NewLine
      "- Detected: " (Show (Low (SubstHoles subst b))) NewLine
    ])
    (UnifyGo eqs subst (Cons err errs))
  (UnifyTest 1 a b eqs subst errs) =
    (UnifyGo eqs subst errs)

// (SubstHoles Subst Term) : Term
(SubstHoles subst (HVar name))        = (HVar name)
(SubstHoles subst HTyp)               = HTyp
(SubstHoles subst (HAnn xval xtyp))   = (HAnn (SubstHoles subst xval) (SubstHoles subst xtyp))
(SubstHoles subst (HLet expr body))   = (HLet (SubstHoles subst expr) λx(SubstHoles subst (body x)))
(SubstHoles subst (HAll type body))   = (HAll (SubstHoles subst type) λx(SubstHoles subst (body x)))
(SubstHoles subst (HLam body))        = (HLam λx(SubstHoles subst (body x)))
(SubstHoles subst (HApp func argm))   = (HApp (SubstHoles subst func) (SubstHoles subst argm))
(SubstHoles subst (HMet hash))        = (PairGet (Get subst hash) λsubst λgot (SubstHolesGot subst hash got))
  (SubstHolesGot subst hash None)     = (HMet hash)
  (SubstHolesGot subst hash (Some x)) = (SubstHoles subst x)



// #############################################################################
// # Tests                                                                     #
// #############################################################################

(DebugPrintType (Err err)                  term) = err
(DebugPrintType (Ok eqs (Pair subst type)) term) = (StrFlatten [
  NewLine
  "main : " (Show (Low type)) " = " NewLine
  "  " (Show (Normal Empty term)) NewLine
])

(DebugPrintAll (Err err)                  term) = err
(DebugPrintAll (Ok eqs (Pair subst type)) term) = (StrFlatten [
  NewLine
  "Equations:" NewLine
  "----------" NewLine
  (ShowEquations eqs) NewLine
  "Substitutions:" NewLine
  "--------------" NewLine
  (ShowSubst (MapToList subst)) NewLine
  "Result:" NewLine
  "-------" NewLine
  (StrFlatten [
    "main" NewLine
    " : " (Show (Low type)) NewLine
    " = " (Show (Normal Empty term)) NewLine
  ])
  NewLine
])

(Kind2 code) =
  let term = (ReadTerm Empty Array.Empty code)
  (DebugPrintType (Infer Empty term) term)

//(Main n) = (Kind2 "
  //def id : ∀(a: Type) ∀(x: a) a = λa λx x

  //def equal : ∀(t: Type) ∀(a: t) ∀(b: t) Type = λt λa λb ∀ (p: ∀(b: t) Type) ∀ (r: (p a)) (p b)
  //def refl : ∀(t: Type) ∀(a: t) (((equal t) a) a) = λt λa λp λr r

  //def bool : Type = ∀(p: Type) ∀(t: p) ∀(f: p) p
  //def true : bool = λp λt λf t
  //def false : bool = λp λt λf f
  //def not : ∀(b: bool) bool = λb λp λt λf (((b p) f) t)
  //def xor : ∀(a: bool) ∀(b: bool) bool = λa (((a Type) not) λb b)

  //def nat : Type = ∀(p: Type) ∀(s: ∀(n: p) p) ∀(z: p) p
  //def zero : nat = λp λs λz z
  //def succ : ∀(n: nat) nat = λn λp λs λz (s (((n p) s) z))
  //def mul : ∀(n: nat) ∀(n: nat) nat = λn λm λp λs λz (((n p) ((m p) s)) z)
  //def exp : ∀(n: nat) ∀(n: nat) nat = λn λm λp ((m ∀(x:p) p) (n p))

  //def list : ∀(a: Type) Type = λa ∀(p: Type) ∀(nil: p) ∀(cons: ∀(x: a) ∀(xs: p) p) p
  //def nil : ∀(a: Type) (list a) = λa λp λnil λcons nil
  //def cons : ∀(a: Type) ∀(x: a) ∀(xs: (list a)) (list a) = λa λx λxs λp λnil λcons ((cons x) (((xs p) nil) cons))

  //def n0  : nat = zero
  //def n1  : nat = (succ n0)
  //def n2  : nat = (succ n1)
  //def n3  : nat = (succ n2)
  //def n4  : nat = (succ n3)
  //def n5  : nat = (succ n4)
  //def n6  : nat = (succ n5)
  //def n7  : nat = (succ n6)
  //def n8  : nat = (succ n7)
  //def n9  : nat = (succ n8)
  //def n10 : nat = (succ n9)
  //def n11 : nat = (succ n10)
  //def n12 : nat = (succ n11)
  //def n13 : nat = (succ n12)
  //def n14 : nat = (succ n13)
  //def n15 : nat = (succ n14)
  //def n16 : nat = (succ n15)
  //def n17 : nat = (succ n16)
  //def n18 : nat = (succ n17)
  //def n19 : nat = (succ n18)
  //def n20 : nat = (succ n19)
  //def n21 : nat = (succ n20)
  //def n22 : nat = (succ n21)
  //def n23 : nat = (succ n22)
  //def n24 : nat = (succ n23)
  //def n25 : nat = (succ n24)
  //def n26 : nat = (succ n25)
  //def n27 : nat = (succ n26)
  //def n28 : nat = (succ n27)
  //def n29 : nat = (succ n28)
  //def n30 : nat = (succ n29)
  //def n31 : nat = (succ n30)
  //def n32 : nat = (succ n31)

  //def slow : ∀(n: nat) bool = λn (((n bool) λr((xor r) r)) true)
  //def blow : ∀(n: nat) bool = λn ((((n Type) λrλb((xor (r b)) (r (not b)))) λx x) true)

  //def the : ∀(a: Type) ∀(n: a) Type = λa λn ∀ (p: ∀(n: a) Type) ∀ (r: ∀(n: a) (p n)) (p n)
  //def val : ∀(a: Type) ∀(n: a) ((the a) n) = λa λn λp λr (r n)

  //def test0 : ((the _a) true) =
    //((val _b) true)

  //test0
//")

(Main n) =
  let code = "
    (Not (True))  = (False)
    (Not (False)) = (True)
    (Main) = (Not (Not (Not (True))))
  "
  let code = "
    (Not (True))  = (False)
    (Not (False)) = (True)

    (Inc (E))      = (E)
    (Inc (I pred)) = (O (Inc pred))
    (Inc (O pred)) = (I pred)

    (Add a     (E)  ) = a
    (Add (E)   b    ) = b
    (Add (O a) (O b)) = (O (Add a b))
    (Add (I a) (O b)) = (I (Add a b))
    (Add (O a) (I b)) = (I (Add a b))
    (Add (I a) (I b)) = (Inc (I (Add a b)))

    (Foo (Z))   = (I (O (O (O (O (O (O (O (O (O (O (O (O (O (O (O (E)))))))))))))))))
    (Foo (S x)) = (Add (Foo x) (Foo x))

    (Main) = (Foo (S (S (S (S (S (S (S (S (S (S (Z))))))))))))
  "
  ((ReadFile code) λn2i λi2n λfile
  let term = (ReadTerm n2i i2n "(Main)")
  let term = (High file term)
  let term = (Low term)
  let term = (Show term)
  term
  )

//((ShowGo (LowGo (TripleGet (TripleGet (TripleGet
  //(PairGet
    //(Array.Got
      //(Braun.Tie (Braun.Tie (Braun.Tie (Braun.Tie (Braun.Tip) (NewEntry (Pair (Var "?") (Var "?")) [(DefRule (Ctr 7 [(Var "a" 1),(Ctr 4 [])]) (Var "a")),(DefRule (Ctr 7 [(Ctr 4 []),(Var "b" 1)]) (Var "b")),(DefRule (Ctr 7 [(Ctr 6 [(Var "a" 1)]),(Ctr 6 [(Var "b" 1)])]) (Ctr 6 [(Ctr 7 [(Var "a"),(Var "b")])])),(DefRule (Ctr 7 [(Ctr 5 [(Var "a" 1)]),(Ctr 6 [(Var "b" 1)])]) (Ctr 5 [(Ctr 7 [(Var "a"),(Var "b")])])),(DefRule (Ctr 7 [(Ctr 6 [(Var "a" 1)]),(Ctr 5 [(Var "b" 1)])]) (Ctr 5 [(Ctr 7 [(Var "a"),(Var "b")])])),(DefRule (Ctr 7 [(Ctr 5 [(Var "a" 1)]),(Ctr 5 [(Var "b" 1)])]) (Ctr 3 [(Ctr 5 [(Ctr 7 [(Var "a"),(Var "b")])])]))]) (Braun.Tip)) (NewEntry (Pair (Var "?") (Var "?")) [(DefRule (Ctr 3 [(Ctr 4 [])]) (Ctr 4 [])),(DefRule (Ctr 3 [(Ctr 5 [(Var "pred" 1)])]) (Ctr 6 [(Ctr 3 [(Var "pred")])])),(DefRule (Ctr 3 [(Ctr 6 [(Var "pred" 1)])]) (Ctr 5 [(Var "pred")]))]) (Braun.Tie (Braun.Tip) (NewEntry (Pair (Var "?") (Var "?")) [(DefRule (Ctr 11 []) (Ctr 8 [(Ctr 9 [])]))]) (Braun.Tip))) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tie (Braun.Tie (Braun.Tip) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tip)) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tip))) (NewEntry (Pair (Var "?") (Var "?")) [(DefRule (Ctr 0 [(Ctr 1 [])]) (Ctr 2 [])),(DefRule (Ctr 0 [(Ctr 2 [])]) (Ctr 1 []))]) (Braun.Tie (Braun.Tie (Braun.Tie (Braun.Tip) (NewEntry (Pair (Var "?") (Var "?")) [(DefRule (Ctr 8 [(Ctr 9 [])]) (Ctr 5 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 6 [(Ctr 4 [])])])])])])])])])])])])])])])])])),(DefRule (Ctr 8 [(Ctr 10 [(Var "x" 2)])]) (Ctr 7 [(Ctr 8 [(Var "x")]),(Ctr 8 [(Var "x")])]))]) (Braun.Tip)) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tip)) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tie (Braun.Tie (Braun.Tip) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tip)) (NewEntry (Pair (Var "?") (Var "?")) []) (Braun.Tip))))
      //9)
    //λx1 λx2 (HighGoRules x2 9 [] x1 [])
  //) λx3 λx4 λx5 (Triple x3 x4 [x5])) λx6 λx7 λx8 (PairGet (Array.Got x6 8) λx9 λx10 (HighGoRules x10 8 x8 x9 x7))) λ_ λ_ λx11 x11) 0)) "")

//(Main n) =
  //let arr = Array.Empty
  //let arr = (Array.Push arr 1)
  //let arr = (Array.Push arr 2)
  //let arr = (Array.Push arr 3)
  //let arr = (Array.Set arr 2 77)
  //arr

//10: 47072 -> 28191680 (598x)
//11: 94175 -> 56327149 (598x)
