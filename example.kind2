// Booleans
Bool : Type
  True  : Bool
  False : Bool

// Natural numbers
Nat : Type
  Zero         : Nat
  (Succ n:Nat) : Nat

// Lists
(List t:Type) : Type
  (Nil t:Type)                  : (List t)
  (Cons t:Type x:t xs:(List t)) : (List t)

// Equality (non-native)
(Equal t:Type a:t b:t) : Type
  (Refl t:Type a:t) : (Equal t a a)

// Negates a boolean
(Bool.Not b:Bool) : Bool
  (Bool.Not True)  = False
  (Bool.Not False) = True

// Doubles a number
(Nat.Double n:Nat) : Nat
  (Nat.Double Zero)     = Zero
  (Nat.Double (Succ n)) = (Succ (Succ (Nat.Double n)))

// Halves a number
(Nat.Half n:Nat) : Nat
  (Nat.Half Zero)            = Zero
  (Nat.Half (Succ Zero))     = Zero
  (Nat.Half (Succ (Succ x))) = (Succ (Nat.Half x))

// Computes 2^n
(Nat.Pow2 n:Nat) : Nat
  (Nat.Pow2 Zero)     = (Succ Zero)
  (Nat.Pow2 (Succ n)) = (Nat.Double (Nat.Pow2 n)) 

// Destroys a Nat into 0
(Nat.Destroy n:Nat) : Nat
  (Nat.Destroy Zero)     = Zero
  (Nat.Destroy (Succ n)) = (Nat.Destroy n)

// Returns the first element of a list
(List.Head t:Type x:(List t)) : t
  (List.Head t (Cons t x xs)) = x

// Symmetry of equality
(Sym t:Type a:t b:t e:{a == b}) : {b == a}
  (Sym t a b e) =
    rewrite x with e in {b == x}
    refl b

// Transitivity of equality
(Trans t:Type a:t b:t c:t e0:{a == b} e1:{b == c}) : {a == c}
(Trans t a b c e0 e1) =
  rewrite x with e0 in {x == c}
  e1

// Congruence of equality
(Cong t:Type u:Type a:t b:t f:∀(x:t)u e:{a == b}) : {(f a) == (f b)}
  (Cong t u a b f e) =
    rewrite x with e in {(f x) == (f b)}
    refl (f b)

// Casting values to another equal type
(Cast a:Type b:Type e:{a == b} x:a) : b
  (Cast a b e x) =
    rewrite x with (Sym Type a b e) in x
    x

// Symmetry of equality on Equal
(Equal.Sym t:Type a:t b:t e:(Equal t a b)) : (Equal t b a)
  (Equal.Sym t a b (Refl u x)) =
    def xx = (Cast u t .5 x)
    let e0 = (Sym t xx a .6)
    let e1 = (Trans t a xx b e0 .7)
    rewrite x with e1 in (Equal t b x)
    (Refl t b)

// Double Negation Theorem
(Bool.DNT b:Bool) : {(Bool.Not (Bool.Not b)) == b}
  (Bool.DNT True)  = refl True
  (Bool.DNT False) = refl False

// Double Negation Theorem on Equal
(Equal.Bool.DNT b:Bool) : (Equal Bool (Bool.Not (Bool.Not b)) b)
  (Equal.Bool.DNT True)  = (Refl Bool True)
  (Equal.Bool.DNT False) = (Refl Bool False)

// Black Friday Theorem
(Nat.BFT n:Nat) : {(Nat.Half (Nat.Double n)) == n}
  (Nat.BFT Zero)            = refl Zero
  (Nat.BFT (Succ Zero))     = refl (Succ Zero)
  (Nat.BFT (Succ (Succ n))) =
    let e0 = (Nat.BFT n)
    let e1 = (Cong _ _ _ _ λx(Succ x) e0)
    let e2 = (Cong _ _ _ _ λx(Succ x) e1)
    e2

Foo : Nat
  Foo = (Nat.Destroy (Nat.Pow2
    (Succ (Succ (Succ (Succ (Succ (Succ (Succ
    (Succ (Succ (Succ (Succ (Succ (Succ (Succ
    Zero))))))))))))))))

Main : {Foo == Zero}
  Main = refl Zero
